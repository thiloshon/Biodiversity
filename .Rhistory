getwd()
setwd("C:/Users/Thiloshon/RProjects/Biodiversity")
getwd()
dir()
?finch
library(finch)
?finch
?simple_read
getwd()
dir()
dir("/source")
dir("/sources")
dir("sources")
dir("sources/GBIF Downloaded Files")
dir("sources/GBIF Downloaded Files/CSV
")
dir("sources/GBIF Downloaded Files/CSV")
file <- simple_read("sources/GBIF Downloaded Files/CSV/0090369-160910150852091.zip")
?system.file
file <- simple_read("sources/GBIF Downloaded Files/CSV/0090369-160910150852091.csv")
dir("sources/GBIF Downloaded Files/DwC")
file <- simple_read("sources/GBIF Downloaded Files/DwC/0090371-160910150852091.zip")
file <- simple_read("sources/GBIF Downloaded Files/DwC/0090371-160910150852091")
file <- simple_read("sources/GBIF Downloaded Files/DwC/0090371-160910150852091/occurrence.txt")
file <- simple_read("sources/GBIF Downloaded Files/DwC/0090371-160910150852091")
file <- dwca_read("sources/GBIF Downloaded Files/DwC/0090371-160910150852091.zip")
class(file)
file
file$files
file$highmeta
file$emlmeta
file$dataset_meta
file$data
fileWithReading <- dwca_read("sources/GBIF Downloaded Files/DwC/0090371-160910150852091.zip", read = TRUE)
fileWithReading$files
fileWithReading
file
fileWithReading$highmeta
class(fileWithReading)
coreData <- fileWithReading$data
coreData$occurrence.txt
names(coreData)
names(coreData$occurrence.txt)
ptm <- proc.time()
file <- dwca_read("sources/GBIF Downloaded Files/DwC/0090371-160910150852091.zip")
proc.time() - ptm
ptmReadZip <- proc.time()
fileWithReading <- dwca_read("sources/GBIF Downloaded Files/DwC/0090371-160910150852091.zip", read = TRUE)
elapsedReadZip <- proc.time() - ptmReadZip
elapsedReadZip
ptmReadDirectory <- proc.time()
fileWithReadDirectory <- dwca_read("sources/GBIF Downloaded Files/DwC/0090371-160910150852091", read = TRUE)
proc.time() - ptmReadDirectory
fileWithReading
fileWithReadDirectory
names(fileWithReadDirectory)
names(fileWithReadDirectory$files)
names(fileWithReadDirectory$data)
names(fileWithReadDirectory$data$occurrence.txt)
names(fileWithReadDirectory$data$multimedia.txt)
names(fileWithReadDirectory$data$verbatim.txt)
temp <- fileWithReadDirectory
dir <- system.file("examples", "sources/GBIF Downloaded Files/DwC/0090371-160910150852091", package = "finch")
x <- dwca_read(dir, read=TRUE)
dir <- system.file("sources", "GBIF Downloaded Files/DwC/0090371-160910150852091", package = "finch")
x <- dwca_read(dir, read=TRUE)
dir <- system.file("sources/GBIF Downloaded Files/DwC", "0090371-160910150852091", package = "finch")
x <- dwca_read(dir, read=TRUE)
?system.file
system.file()
system.file(package = "ggplot")
system.file(package = "ggplot2")
system.file("INDEX")
system.file("0090371-160910150852091")
system.file("sources")
?simple_read
file$data
file$data[1]
document()
devtools::document()
install.packages("devtools")
document()
devtools::document()
library(rgbif)
?occ_data
dat <- occ_data(scientificName = 'Ursus americanus')
dat <- occ_data(scientificName = 'Ursus americanus', limit = 10)
class(dat)
dat$data
repeating_digits <- function(gbif_data) {
t <- Sys.time()
# -------------- Finding records with repeated digits ---------------------------------------------- #
latRepeat <- sapply(gbif_data$decimalLatitude, function(lat) {
x <- as.character.numeric_version(lat)
rmword <- grepl("(\\w)\\1{2, }", x)
return(rmword)
})
longRepeat <-
sapply(gbif_data$decimalLongitude, function(long) {
x <- as.character.numeric_version(long)
rmword <- grepl("(\\w)\\1{2, }", x)
return(rmword)
})
# -------------- End of Finding records with repeated digits --------------------------------------- #
# -------------- Finding number of repeated digits of Latitude and Flagging------------------------- #
gbif_data$latRepeatCount  <-
sapply(1:dim(gbif_data)[1], function(counter) {
if (latRepeat[counter]) {
lat <-
as.character.numeric_version(gbif_data[counter, c("decimalLatitude")])
list = as.vector(strsplit(lat, ""))
table <- data.table::as.data.table(list)
frameCount <-
table[, count := sequence(.N), by = rleid(V1)][V1 == "No", count := 0][]
max(frameCount$count)
} else{
0
}
})
# -------------- End of Finding number of repeated digits of Latitude and Flagging-------------------- #
# -------------- Finding number of repeated digits of Longitude and Flagging------------------------- #
gbif_data$longRepeatCount <-
sapply(1:dim(gbif_data)[1], function(counter) {
if (longRepeat[counter]) {
long <-
as.character.numeric_version(gbif_data[counter, c("decimalLongitude")])
list = as.vector(strsplit(long, ""))
table <- data.table::as.data.table(list)
frameCount <-
table[, count := sequence(.N), by = rleid(V1)][V1 == "No", count := 0][]
max(frameCount$count)
} else{
0
}
})
# -------------- End of Finding number of repeated digits of Longitude and Flagging------------------- #
print(Sys.time() - t)
return(gbif_data)
}
flagged_dat <- repeating_digits(dat$data)
library(data.table)
install.packages("data.table")
install.packages("data.table")
flagged_dat <- repeating_digits(dat$data)
library(data.table)
flagged_dat <- repeating_digits(dat$data)
flagged_dat$latRepeatCount
georeference_protocol_flag <- function(gbif_data) {
t <- Sys.time()
# -------------- List of possible georeference protocols ---------------------------------------------- #
protocols <-
c(
"",
"MaNIS/HerpNet/ORNIS Georeferencing Guidelines, GBIF Best Practices",
"GEO MACN v. 0.1",
"not recorded",
"VertNet Georeferencing Guidelines",
"MaNIS georeferencing guidelines" ,
"Collector assigned",
"GEOLocate",
"unknown-migration",
"collector",
"MaNIS",
"unknown",
"digital resource",
"unspecified",
"GeoLocate",
"BioGeoMancer",
"GPS",
"estimated from other samples"
)
# -------------- Flags of the above georeference protocols -------------------------------------------- #
flags <- c(
NA,
"Medium",
"Medium",
"Low",
"Medium",
"Medium",
"Low",
"Medium",
"Low",
"Low",
"Medium",
NA,
"Medium",
NA,
"Medium",
"Medium",
"High",
"Low"
)
# -------------- Mapping georeference protocols and suitable Flags  ------------------------------------ #
gbif_data$georeferenceProtocolFlag <-
flags[match(gbif_data$georeferenceProtocol, protocols)]
print(Sys.time() - t)
return(gbif_data)
}
flagged_dat <- georeference_protocol_flag(dat$data)
repeating_digits <- function(gbif_data) {
t <- Sys.time()
# -------------- Finding records with repeated digits ---------------------------------------------- #
lat_repeat <- sapply(gbif_data$decimalLatitude, function(lat) {
x <- as.character.numeric_version(lat)
rmword <- grepl("(\\w)\\1{2, }", x)
return(rmword)
})
long_repeat <-
sapply(gbif_data$decimalLongitude, function(long) {
x <- as.character.numeric_version(long)
rmword <- grepl("(\\w)\\1{2, }", x)
return(rmword)
})
# -------------- End of Finding records with repeated digits --------------------------------------- #
# -------------- Finding number of repeated digits of Latitude and Flagging------------------------- #
gbif_data$latRepeatCount  <-
sapply(1:dim(gbif_data)[1], function(counter) {
if (lat_repeat[counter]) {
lat <-
as.character.numeric_version(gbif_data[counter, c("decimalLatitude")])
list = as.vector(strsplit(lat, ""))
table <- data.table::as.data.table(list)
frameCount <-
table[, count := sequence(.N), by = rleid(V1)][V1 == "No", count := 0][]
max(frameCount$count)
} else{
0
}
})
# -------------- Endof Finding number of repeated digits of Latitude and Flagging-------------------- #
# -------------- Finding number of repeated digits of Longitude and Flagging------------------------- #
gbif_data$longRepeatCount <-
sapply(1:dim(gbif_data)[1], function(counter) {
if (long_repeat[counter]) {
long <-
as.character.numeric_version(gbif_data[counter, c("decimalLongitude")])
list = as.vector(strsplit(long, ""))
table <- data.table::as.data.table(list)
frameCount <-
table[, count := sequence(.N), by = rleid(V1)][V1 == "No", count := 0][]
max(frameCount$count)
} else{
0
}
})
# -------------- End of Finding number of repeated digits of Longitude and Flagging------------------- #
message(Sys.time() - t)
return(gbif_data)
}
flagged_dat <- repeating_digits(dat$data)
repeating_digits <- function(gbif_data) {
t <- Sys.time()
# -------------- Finding records with repeated digits ---------------------------------------------- #
lat_repeat <- sapply(gbif_data$decimalLatitude, function(lat) {
x <- as.character.numeric_version(lat)
rmword <- grepl("(\\w)\\1{2, }", x)
return(rmword)
})
long_repeat <-
sapply(gbif_data$decimalLongitude, function(long) {
x <- as.character.numeric_version(long)
rmword <- grepl("(\\w)\\1{2, }", x)
return(rmword)
})
# -------------- End of Finding records with repeated digits --------------------------------------- #
# -------------- Finding number of repeated digits of Latitude and Flagging------------------------- #
gbif_data$latRepeatCount  <-
sapply(1:dim(gbif_data)[1], function(counter) {
if (lat_repeat[counter]) {
lat <-
as.character.numeric_version(gbif_data[counter, c("decimalLatitude")])
list = as.vector(strsplit(lat, ""))
table <- data.table::as.data.table(list)
frameCount <-
table[, count := sequence(.N), by = rleid(V1)][V1 == "No", count := 0][]
max(frameCount$count)
} else{
0
}
})
# -------------- Endof Finding number of repeated digits of Latitude and Flagging-------------------- #
# -------------- Finding number of repeated digits of Longitude and Flagging------------------------- #
gbif_data$longRepeatCount <-
sapply(1:dim(gbif_data)[1], function(counter) {
if (long_repeat[counter]) {
long <-
as.character.numeric_version(gbif_data[counter, c("decimalLongitude")])
list = as.vector(strsplit(long, ""))
table <- data.table::as.data.table(list)
frameCount <-
table[, count := sequence(.N), by = rleid(V1)][V1 == "No", count := 0][]
max(frameCount$count)
} else{
0
}
})
# -------------- End of Finding number of repeated digits of Longitude and Flagging------------------- #
message(paste("Time difference of " , Sys.time() - t, " seconds", sep = ""))
return(gbif_data)
}
flagged_dat <- repeating_digits(dat$data)
